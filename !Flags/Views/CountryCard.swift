import SwiftUI

struct CountryCard: View {
    let country: Country
    @State private var isRevealed = false
    @State private var blurRadius: CGFloat = 10
    let onKnow: () -> Void
    let onDontKnow: () -> Void
    
    var body: some View {
        VStack(spacing: 24) {
            // –ö–∞—Ä—Ç–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            VStack(spacing: 0) {
                // –ü—Ä–∞–ø–æ—Ä –∑–≤–µ—Ä—Ö—É
                ZStack {
                    RoundedRectangle(cornerRadius: 24)
                        .fill(Color(.systemBackground))
                        .shadow(color: .black.opacity(0.2), radius: 8, x: 0, y: 4)
                    
                    Image(country.flagImageName)
                        .resizable()
                        .scaledToFill()
                        .frame(maxWidth: .infinity)
                        .frame(height: 180)
                        .clipShape(RoundedRectangle(cornerRadius: 24))
                }
                .frame(maxWidth: .infinity)
                .frame(height: 180)
                
                // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—Ä–∞—ó–Ω—É
                ZStack(alignment: .bottom) {
                    VStack(spacing: 32) {
                        // –ù–∞–∑–≤–∞ –∫—Ä–∞—ó–Ω–∏
                        Text(country.name)
                            .font(.system(size: 32, weight: .bold))
                            .padding(.top, 24)
                        
                        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                        VStack(spacing: 24) {
                            infoRow(
                                icon: "house.fill",
                                color: .blue,
                                title: "–°—Ç–æ–ª–∏—Ü—è",
                                value: country.capital
                            )
                            
                            infoRow(
                                icon: "person.2.fill",
                                color: .green,
                                title: "–ù–∞—Å–µ–ª–µ–Ω–Ω—è",
                                value: country.population
                            )
                            
                            infoRow(
                                icon: "sparkles",
                                color: .orange,
                                title: "–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç",
                                value: country.funFact
                            )
                        }
                        .padding(.horizontal, 16)
                        
                        Spacer()
                    }
                    .blur(radius: isRevealed ? 0 : blurRadius)
                    .onChange(of: isRevealed) { oldValue, newValue in
                        if !newValue {
                            withAnimation(
                                .easeInOut(duration: 2)
                                .repeatForever(autoreverses: true)
                            ) {
                                blurRadius = 20
                            }
                        }
                    }
                    .onAppear {
                        withAnimation(
                            .easeInOut(duration: 2)
                            .repeatForever(autoreverses: true)
                        ) {
                            blurRadius = 20
                        }
                    }
                    
                    // –ö–Ω–æ–ø–∫–∞ "–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ"
                    Button {
                        withAnimation(.spring(duration: 0.3)) {
                            isRevealed.toggle()
                        }
                    } label: {
                        Text(isRevealed ? "–ó—Ä–æ–∑—É–º—ñ–ª–æ" : "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–∞–∑–≤—É")
                            .font(.system(size: 16, weight: .medium))
                            .foregroundColor(.red)
                    }
                    .padding(.bottom, 16)
                }
            }
            .frame(maxWidth: .infinity)
            .frame(height: 580)
            .background(Color(.systemBackground))
            .cornerRadius(24)
            .shadow(radius: 20, x: 0, y: 4)
            
            // –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥ –∫–∞—Ä—Ç–∫–æ—é
            HStack(spacing: 20) {
                actionButton(title: "–ù–µ –∑–Ω–∞—é", color: .red) {
                    isRevealed = false
                    onDontKnow()
                }
                
                actionButton(title: "–ó–Ω–∞—é", color: .accentColor) {
                    isRevealed = false
                    onKnow()
                }
            }
        }
        .padding(.horizontal, 16)
        .padding(.top, -8)
    }
    
    private func infoRow(icon: String, color: Color, title: String, value: String) -> some View {
        HStack(alignment: .top, spacing: 12) {
            // –Ü–∫–æ–Ω–∫–∞ –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
            ZStack {
                Circle()
                    .fill(color.opacity(0.1))
                    .frame(width: 36, height: 36)
                
                Image(systemName: icon)
                    .font(.system(size: 16))
                    .foregroundColor(color)
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.system(size: 14))
                    .foregroundColor(.secondary)
                Text(value)
                    .font(.system(size: 16, weight: .medium))
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    func actionButton(title: String, color: Color, action: @escaping () -> Void) -> some View {
        Button(action: action) {
            HStack(spacing: 8) {
                // –Ü–∫–æ–Ω–∫–∞
                Text(title == "–ó–Ω–∞—é" ? "üëç" : "‚ùå")
                    .font(.system(size: 20))
                
                // –¢–µ–∫—Å—Ç
                Text(title)
                    .font(.system(size: 16, weight: .medium))
            }
            .foregroundColor(.white)
            .frame(width: 160, height: 48)
            .background(color)
            .cornerRadius(12)
            .shadow(radius: 10, x: 0, y: 4)
        }
        .buttonStyle(ScaleButtonStyle())
    }
    
    // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    struct ScaleButtonStyle: ButtonStyle {
        func makeBody(configuration: Configuration) -> some View {
            configuration.label
                .scaleEffect(configuration.isPressed ? 0.95 : 1)
                .animation(.spring(duration: 0.2, bounce: 0.3), value: configuration.isPressed)
        }
    }
}

#Preview {
    CountryCard(
        country: Country(
            id: "nl",
            name: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
            capital: "–ê–º—Å—Ç–µ—Ä–¥–∞–º",
            population: "17,5 –º–ª–Ω",
            continent: .europe,
            isIsland: false,
            flagImageName: "netherlands",
            funFact: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏ –≤—ñ–¥–æ–º—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º —Ç—é–ª—å–ø–∞–Ω—ñ–≤"
        ),
        onKnow: {},
        onDontKnow: {}
    )
} 