import SwiftUI

struct EmojiPickerView: View {
    @Binding var avatarName: String
    @Binding var isPresented: Bool
    
    private let emojis = ["üòä", "üòé", "ü§ì", "üßê", "ü§†", "ü•≥", "ü§™", "üòá", "ü¶∏‚Äç‚ôÇÔ∏è", "ü¶π‚Äç‚ôÇÔ∏è", "üßô‚Äç‚ôÇÔ∏è", "üßö‚Äç‚ôÇÔ∏è"]
    
    var body: some View {
        NavigationView {
            ScrollView {
                LazyVGrid(columns: [GridItem(.adaptive(minimum: 60))], spacing: 20) {
                    ForEach(emojis, id: \.self) { emoji in
                        Button {
                            avatarName = emoji
                            isPresented = false
                        } label: {
                            Text(emoji)
                                .font(.system(size: 40))
                        }
                    }
                }
                .padding()
            }
            .navigationTitle("–û–±–µ—Ä—ñ—Ç—å –∞–≤–∞—Ç–∞—Ä")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        isPresented = false
                    }
                }
            }
        }
    }
}

struct AccountSettingsSection: View {
    @EnvironmentObject private var profileService: ProfileService
    @EnvironmentObject private var authService: AuthService
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        Section {
            Button(action: {
                profileService.resetToGuest()
                dismiss()
            }) {
                HStack {
                    Text("–í–∏–π—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏")
                        .foregroundColor(.red)
                    Spacer()
                    Image(systemName: "trash")
                        .foregroundColor(.red)
                        .frame(width: 24)
                }
            }
            
            NavigationLink(destination: SupportView(email: authService.currentUser?.email ?? "")) {
                HStack {
                    Text("–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É")
                    Spacer()
                    Image(systemName: "envelope")
                        .frame(width: 24)
                }
            }
            
            Button(action: {
                Task {
                    try? await StoreService.shared.restorePurchases()
                }
            }) {
                HStack {
                    Text("–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏")
                    Spacer()
                    Image(systemName: "arrow.clockwise")
                        .frame(width: 24)
                }
            }
        }
    }
}

struct EditProfileView: View {
    @Environment(\.dismiss) private var dismiss
    @StateObject private var profileService = ProfileService.shared
    @StateObject private var authService = AuthService.shared
    @State private var showingSignOutConfirmation = false
    @State private var showingEmojiPicker = false
    @State private var showingRestoreError = false
    @State private var showingSupportView = false
    @State private var isRestoringPurchases = false
    @State private var name: String
    @State private var avatarName: String
    
    init() {
        _name = State(initialValue: ProfileService.shared.currentProfile.name)
        _avatarName = State(initialValue: ProfileService.shared.currentProfile.avatarName)
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    TextField("–Ü–º'—è", text: $name)
                    
                    Button {
                        showingEmojiPicker = true
                    } label: {
                        HStack {
                            Text("–ê–≤–∞—Ç–∞—Ä")
                            Spacer()
                            Text(avatarName)
                        }
                    }
                }
                
                if authService.isAuthenticated {
                    AccountSettingsSection()
                }
            }
            .navigationTitle("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–°–∫–∞—Å—É–≤–∞—Ç–∏") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        saveProfile()
                        dismiss()
                    }
                }
            }
            .alert("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏?", isPresented: $showingSignOutConfirmation) {
                Button("–°–∫–∞—Å—É–≤–∞—Ç–∏", role: .cancel) {}
                Button("–í–∏–π—Ç–∏ —Ç–∞ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", role: .destructive) {
                    authService.signOut()
                    dismiss()
                }
            } message: {
                VStack(alignment: .leading, spacing: 8) {
                    Text("‚ö†Ô∏è –Ø–∫—â–æ –≤–∏ –≤–∏–π–¥–µ—Ç–µ, –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ!")
                        .fontWeight(.bold)
                    Text("üîπ –í—ñ–¥–∫—Ä–∏—Ç—ñ –∫—Ä–∞—ó–Ω–∏ ‚Äì —Å–∫–∏–Ω—É—Ç—å—Å—è.")
                    Text("üîπ –ù–∞–≥–æ—Ä–æ–¥–∏ ‚Äì –∑–∞–±–ª–æ–∫—É—é—Ç—å—Å—è.")
                    Text("üîπ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è ‚Äì –∑–Ω–∏–∫–Ω—É—Ç—å.")
                    Text("\n–¶–µ –±–µ–∑–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ, —è–∫—â–æ –≤–∏ –Ω–µ —É–≤—ñ–π–¥–µ—Ç–µ –∑–Ω–æ–≤—É!")
                        .fontWeight(.medium)
                }
            }
            .alert("–ü–æ–∫—É–ø–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", isPresented: $showingRestoreError) {
                Button("OK", role: .cancel) {}
            } message: {
                Text("–ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Ü—å–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –ø—ñ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∞–∫–∞—É–Ω—Ç–æ–º Apple ID.")
            }
            .sheet(isPresented: $showingEmojiPicker) {
                EmojiPickerView(avatarName: $avatarName, isPresented: $showingEmojiPicker)
            }
            .sheet(isPresented: $showingSupportView) {
                SupportView(email: authService.currentUser?.email ?? "")
            }
        }
    }
    
    private func saveProfile() {
        profileService.updateName(name)
        profileService.updateAvatar(avatarName)
    }
}

#Preview {
    EditProfileView()
} 