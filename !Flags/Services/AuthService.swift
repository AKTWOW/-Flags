import Foundation
import UIKit
import GoogleSignIn
import KeychainSwift

struct GoogleUser {
    let id: String
    let email: String?
    let name: String?
}

@MainActor
class AuthService: ObservableObject {
    static let shared = AuthService()
    private let keychain = KeychainSwift()
    @Published var isAuthenticated = false
    @Published private(set) var currentUser: GoogleUser?
    
    private init() {
        checkAuthStatus()
    }
    
    // MARK: - Auth Status
    private func checkAuthStatus() {
        if keychain.get("google_token") != nil {
            Logger.shared.info("–ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π Google —Ç–æ–∫–µ–Ω")
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
            let profile = ProfileService.shared.currentProfile
            if profile.authProvider == .google {
                currentUser = GoogleUser(
                    id: profile.id,
                    email: profile.email,
                    name: profile.name
                )
                isAuthenticated = true
            } else {
                // –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –≤—ñ–¥ Google, –æ—á–∏—â–∞—î–º–æ —Ç–æ–∫–µ–Ω
                keychain.delete("google_token")
                currentUser = nil
                isAuthenticated = false
            }
        } else {
            Logger.shared.debug("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            currentUser = nil
            isAuthenticated = false
        }
    }
    
    // MARK: - Google Sign In
    func signInWithGoogle() async throws -> Profile {
        Logger.shared.info("–ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google")
        
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first,
              let rootViewController = window.rootViewController else {
            Logger.shared.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ rootViewController –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
            throw AuthError.presentationError
        }
        
        Logger.shared.debug("–í–∏–∫–ª–∏–∫–∞—î–º–æ Google Sign In")
        let result = try await GIDSignIn.sharedInstance.signIn(withPresenting: rootViewController)
        Logger.shared.info("–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google")
        
        // Update current user
        currentUser = GoogleUser(
            id: result.user.userID ?? UUID().uuidString,
            email: result.user.profile?.email,
            name: result.user.profile?.name
        )
        
        // Create profile from Google sign in data
        let profile = try await createProfileFromGoogle(result: result)
        await saveAuthData(profile: profile)
        return profile
    }
    
    private func createProfileFromGoogle(result: GIDSignInResult) async throws -> Profile {
        Logger.shared.info("–°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö Google")
        let token = result.user.accessToken.tokenString
        
        // Save token securely
        keychain.set(token, forKey: "google_token")
        Logger.shared.debug("–¢–æ–∫–µ–Ω Google –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Keychain")
        
        // Create new profile
        let profile = Profile(
            id: result.user.userID ?? UUID().uuidString,
            name: result.user.profile?.name ?? "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á Google",
            email: result.user.profile?.email,
            phoneNumber: nil,
            dateOfBirth: nil,
            avatarName: "üôÇ",
            authProvider: .google,
            isPro: false,
            level: .newbie,
            achievements: [],
            knownCountries: Set(),
            unknownCountries: Set(),
            completedContinents: Set(),
            visitedCountries: Set(),
            correctAnswersStreak: 0,
            maxCorrectAnswersStreak: 0,
            capitalGuessCount: 0,
            silhouetteGuessCount: 0,
            lastLoginDate: Date(),
            createdAt: Date(),
            updatedAt: Date()
        )
        
        return profile
    }
    
    // MARK: - Auth Data Management
    private func saveAuthData(profile: Profile) async {
        isAuthenticated = true
        ProfileService.shared.updateProfile(profile)
    }
    
    func signOut() {
        Logger.shared.info("–í–∏—Ö–æ–¥–∏–º–æ –∑ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É")
        GIDSignIn.sharedInstance.signOut()
        keychain.delete("google_token")
        currentUser = nil
        isAuthenticated = false
    }
    
    func deleteAccount() async throws {
        // TODO: Send delete request to server
        signOut()
    }
}

// MARK: - Errors
enum AuthError: Error {
    case invalidCredential
    case presentationError
    case serverError
    case unknown
} 