import Foundation
import SwiftUI
import StoreKit

@MainActor
class ProfileService: ObservableObject {
    static let shared = ProfileService()
    
    @Published private(set) var currentProfile: Profile
    private let storage: UserDefaults
    
    private init() {
        self.storage = UserDefaults.standard
        
        if let data = storage.data(forKey: "profile"),
           let profile = try? JSONDecoder().decode(Profile.self, from: data) {
            Logger.shared.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ—Ñ—ñ–ª—å")
            self.currentProfile = profile
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
            Task {
                await checkPurchaseStatus()
            }
        } else {
            Logger.shared.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –≥–æ—Å—Ç—å–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å")
            self.currentProfile = .createGuest()
            self.saveProfile()
        }
    }
    
    func reloadProfile() {
        Logger.shared.info("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
        
        if let data = storage.data(forKey: "profile"),
           let profile = try? JSONDecoder().decode(Profile.self, from: data) {
            Logger.shared.debug("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ \(profile.knownCountries.count) –∫—Ä–∞—ó–Ω")
            
            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ –∑–º—ñ–Ω–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
            objectWillChange.send()
            
            self.currentProfile = profile
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫
            updateLastLoginAndCheckDailyStreak()
            
            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —â–µ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            objectWillChange.send()
        } else {
            Logger.shared.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")
        }
    }
    
    private func saveProfile() {
        Logger.shared.debug("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
        
        if let encoded = try? JSONEncoder().encode(currentProfile) {
            storage.set(encoded, forKey: "profile")
            storage.synchronize()
        } else {
            Logger.shared.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é")
        }
    }
    
    private func checkPurchaseStatus() async {
        do {
            try await AppStore.sync()
            
            for await result in Transaction.currentEntitlements {
                if case .verified(let transaction) = result {
                    if transaction.productID == StoreService.shared.productId {
                        currentProfile.isPro = true
                        saveProfile()
                        return
                    }
                }
            }
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ - –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ PRO
            currentProfile.isPro = false
            saveProfile()
        } catch {
            Logger.shared.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—É–ø–æ–∫: \(error.localizedDescription)")
            currentProfile.isPro = false
            saveProfile()
        }
    }
    
    func signInWithGoogle() {
        // TODO: Implement Google Sign In
        currentProfile.authProvider = .google
        saveProfile()
    }
    
    func updateProfile(_ profile: Profile) {
        Logger.shared.debug("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        let currentKnownCountries = currentProfile.knownCountries
        let currentUnknownCountries = currentProfile.unknownCountries
        let currentVisitedCountries = currentProfile.visitedCountries
        let currentIsPro = currentProfile.isPro
        let currentCorrectAnswersStreak = currentProfile.correctAnswersStreak
        let currentMaxCorrectAnswersStreak = currentProfile.maxCorrectAnswersStreak
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
        currentProfile = profile
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ
        if currentProfile.achievements.isEmpty {
            currentProfile.achievements = Achievement.all
        }
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
        currentProfile.knownCountries = currentKnownCountries
        currentProfile.unknownCountries = currentUnknownCountries
        currentProfile.visitedCountries = currentVisitedCountries
        currentProfile.isPro = currentIsPro
        currentProfile.correctAnswersStreak = currentCorrectAnswersStreak
        currentProfile.maxCorrectAnswersStreak = currentMaxCorrectAnswersStreak
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ
        saveProfile()
        checkAchievements()
        updateLevel()
    }
    
    func updateName(_ name: String) {
        currentProfile.name = name
        saveProfile()
    }
    
    func updateAvatar(_ avatar: String) {
        currentProfile.avatarName = avatar
        saveProfile()
    }
    
    // MARK: - Country Knowledge Management
    func markCountryAsKnown(_ countryId: String) {
        Logger.shared.info("markCountryAsKnown –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –∫—Ä–∞—ó–Ω–∏: \(countryId)")
        Logger.shared.debug("–ü–æ—Ç–æ—á–Ω—ñ –≤—ñ–¥–æ–º—ñ –∫—Ä–∞—ó–Ω–∏: \(currentProfile.knownCountries)")
        
        // –î–æ–¥–∞—î–º–æ –∫—Ä–∞—ó–Ω—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞
        if !currentProfile.knownCountries.contains(countryId) {
            objectWillChange.send()
            
            // –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–æ–º–∏—Ö —ñ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö
            currentProfile.knownCountries.insert(countryId)
            currentProfile.unknownCountries.remove(countryId)
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            currentProfile.correctAnswersStreak += 1
            currentProfile.maxCorrectAnswersStreak = max(
                currentProfile.maxCorrectAnswersStreak,
                currentProfile.correctAnswersStreak
            )
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
            checkContinentCompletion(for: countryId)
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            saveProfile()
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ —Ä—ñ–≤–µ–Ω—å
            checkAchievements()
            updateLevel()
            
            objectWillChange.send()
        }
    }
    
    func markCountryAsUnknown(_ countryId: String) {
        Logger.shared.info("‚ùå markCountryAsUnknown –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –∫—Ä–∞—ó–Ω–∏: \(countryId)")
        
        // –Ø–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –±—É–ª–∞ –≤—ñ–¥–æ–º–∞, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
        if currentProfile.knownCountries.contains(countryId) {
            objectWillChange.send()
            
            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –≤—ñ–¥–æ–º–∏—Ö —ñ –¥–æ–¥–∞—î–º–æ –¥–æ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö
            currentProfile.knownCountries.remove(countryId)
            currentProfile.unknownCountries.insert(countryId)
            currentProfile.correctAnswersStreak = 0
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
            updateContinentStatus(for: countryId)
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            saveProfile()
            checkAchievements()
            updateLevel()
            
            objectWillChange.send()
        }
    }
    
    // MARK: - Continent Management
    private func checkContinentCompletion(for countryId: String) {
        // TODO: Implement continent completion check
        // 1. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –∫—Ä–∞—ó–Ω–∏
        // 2. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
        // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ –≤–æ–Ω–∏ —î —É knownCountries
        // 4. –Ø–∫—â–æ —Ç–∞–∫ - –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –¥–æ completedContinents
    }
    
    private func updateContinentStatus(for countryId: String) {
        // TODO: Implement continent status update
        // 1. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –∫—Ä–∞—ó–Ω–∏
        // 2. –Ø–∫—â–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –±—É–≤ —É completedContinents
        // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É —â–µ –≤—ñ–¥–æ–º—ñ
        // 4. –Ø–∫—â–æ –Ω—ñ - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –∑ completedContinents
    }
    
    // MARK: - Achievement Management
    private func checkAchievements() {
        Logger.shared.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
        
        let knownCount = currentProfile.knownCountries.count
        let totalCountries = 195.0
        
        // –ñ–∏–≤–∏–π –ê—Ç–ª–∞—Å (100 –∫—Ä–∞—ó–Ω)
        let livingAtlasProgress = Double(knownCount) / 100.0
        updateAchievementProgress(.livingAtlas, livingAtlasProgress)
        Logger.shared.debug("üó∫Ô∏è –ñ–∏–≤–∏–π –ê—Ç–ª–∞—Å –ø—Ä–æ–≥—Ä–µ—Å: \(livingAtlasProgress * 100)% (\(knownCount)/100 –∫—Ä–∞—ó–Ω)")
        
        // –ü–æ–∑–∞–∑–µ–º–Ω–∏–π —Ç—É—Ä–∏—Å—Ç (–≤—Å—ñ –∫—Ä–∞—ó–Ω–∏)
        let alienTouristProgress = Double(knownCount) / totalCountries
        updateAchievementProgress(.alienTourist, alienTouristProgress)
        Logger.shared.debug("üõ∏ –ü–æ–∑–∞–∑–µ–º–Ω–∏–π —Ç—É—Ä–∏—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å: \(alienTouristProgress * 100)% (\(knownCount)/195 –∫—Ä–∞—ó–Ω)")
        
        // –ü–æ–¥–æ—Ä–æ–∂–Ω–∏–∫ (–≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –û–∫–µ–∞–Ω—ñ—ó)
        let oceaniaCountries = CountryService.shared.countries.filter { $0.continent == .oceania }
        let knownOceaniaCount = oceaniaCountries.filter { currentProfile.knownCountries.contains($0.id) }.count
        let oceaniaProgress = Double(knownOceaniaCount) / Double(oceaniaCountries.count)
        updateAchievementProgress(.traveler, oceaniaProgress)
        Logger.shared.debug("ü¶ò –ü–æ–¥–æ—Ä–æ–∂–Ω–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å: \(oceaniaProgress * 100)% (\(knownOceaniaCount)/\(oceaniaCountries.count) –∫—Ä–∞—ó–Ω)")
        
        // –í—ñ–¥—å–º–∞–∫ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó (–≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –Ñ–≤—Ä–æ–ø–∏)
        let europeCountries = CountryService.shared.countries.filter { $0.continent == .europe }
        let knownEuropeCount = europeCountries.filter { currentProfile.knownCountries.contains($0.id) }.count
        let europeProgress = Double(knownEuropeCount) / Double(europeCountries.count)
        updateAchievementProgress(.geographyWitcher, europeProgress)
        Logger.shared.debug("üîÆ –í—ñ–¥—å–º–∞–∫ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–æ–≥—Ä–µ—Å: \(europeProgress * 100)% (\(knownEuropeCount)/\(europeCountries.count) –∫—Ä–∞—ó–Ω)")
        
        // –ó–∞–≤–æ–π–æ–≤–Ω–∏–∫ –º–æ—Ä—ñ–≤ (–≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –ê—Ñ—Ä–∏–∫–∏)
        let africaCountries = CountryService.shared.countries.filter { $0.continent == .africa }
        let knownAfricaCount = africaCountries.filter { currentProfile.knownCountries.contains($0.id) }.count
        let africaProgress = Double(knownAfricaCount) / Double(africaCountries.count)
        updateAchievementProgress(.seaConqueror, africaProgress)
        Logger.shared.debug("üåä –ó–∞–≤–æ–π–æ–≤–Ω–∏–∫ –º–æ—Ä—ñ–≤ –ø—Ä–æ–≥—Ä–µ—Å: \(africaProgress * 100)% (\(knownAfricaCount)/\(africaCountries.count) –∫—Ä–∞—ó–Ω)")
        
        // –®–µ—Ä–ª–æ–∫ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ—ñ—ó (–≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –ê–∑—ñ—ó)
        let asiaCountries = CountryService.shared.countries.filter { $0.continent == .asia }
        let knownAsiaCount = asiaCountries.filter { currentProfile.knownCountries.contains($0.id) }.count
        let asiaProgress = Double(knownAsiaCount) / Double(asiaCountries.count)
        updateAchievementProgress(.cartographySherlock, asiaProgress)
        Logger.shared.debug("üïµÔ∏è‚Äç‚ôÇÔ∏è –®–µ—Ä–ª–æ–∫ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–æ–≥—Ä–µ—Å: \(asiaProgress * 100)% (\(knownAsiaCount)/\(asiaCountries.count) –∫—Ä–∞—ó–Ω)")
        
        // –©–æ–¥–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ (7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å)
        if let dailyChallenge = currentProfile.achievements.first(where: { $0.id == Achievement.dailyChallenge.id }) {
            let progress = Double(currentProfile.correctAnswersStreak) / Double(dailyChallenge.target)
            updateAchievementProgress(dailyChallenge, progress)
            Logger.shared.debug("üéØ –©–æ–¥–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å: \(progress * 100)% (\(currentProfile.correctAnswersStreak)/7 –¥–Ω—ñ–≤)")
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–≥—Ä–µ—Å—É
        updateLevel()
    }
    
    private func updateLevel() {
        let progress = currentProfile.progress
        let newLevel: UserLevel
        
        switch progress {
        case 0..<0.25:
            newLevel = .newbie
        case 0.25..<0.5:
            newLevel = .explorer
        case 0.5..<0.75:
            newLevel = .expert
        case 0.75..<1.0:
            newLevel = .master
        default:
            newLevel = .guru
        }
        
        if newLevel != currentProfile.level {
            currentProfile.level = newLevel
            saveProfile()
        }
    }
    
    func toggleVisitedCountry(_ countryId: String) {
        if currentProfile.visitedCountries.contains(countryId) {
            currentProfile.visitedCountries.remove(countryId)
        } else {
            currentProfile.visitedCountries.insert(countryId)
        }
        saveProfile()
    }
    
    func upgradeToPro() {
        currentProfile.isPro = true
        saveProfile()
    }
    
    func resetProStatus() {
        currentProfile.isPro = false
        saveProfile()
    }
    
    private func updateAchievementProgress(_ achievement: Achievement, _ progress: Double) {
        if let index = currentProfile.achievements.firstIndex(where: { $0.id == achievement.id }) {
            currentProfile.achievements[index].progress = min(max(progress, 0), 1)
            if progress >= 1 {
                currentProfile.achievements[index].isUnlocked = true
            }
            saveProfile()
        }
    }
    
    private func unlockAchievement(_ achievement: Achievement) {
        if let index = currentProfile.achievements.firstIndex(where: { $0.id == achievement.id }) {
            currentProfile.achievements[index].isUnlocked = true
            saveProfile()
        }
    }
    
    func resetToGuest() {
        currentProfile = .createGuest()
        saveProfile()
    }
    
    private func updateLastLoginAndCheckDailyStreak() {
        let calendar = Calendar.current
        let now = Date()
        
        // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –≤—Ö—ñ–¥, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É
        guard let lastLogin = currentProfile.lastLoginDate else {
            currentProfile.lastLoginDate = now
            saveProfile()
            return
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –¥–µ–Ω—å
        if !calendar.isDate(lastLogin, inSameDayAs: now) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
            let isNextDay = calendar.isDate(lastLogin, equalTo: now, toGranularity: .day)
                || calendar.dateComponents([.day], from: lastLogin, to: now).day == 1
            
            if isNextDay {
                // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —â–æ–¥–µ–Ω–Ω–∏—Ö –≤—Ö–æ–¥—ñ–≤
                currentProfile.correctAnswersStreak += 1
                Logger.shared.debug("üéØ –©–æ–¥–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫: \(currentProfile.correctAnswersStreak) –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å")
            } else {
                // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π –¥–µ–Ω—å
                currentProfile.correctAnswersStreak = 1
                Logger.shared.debug("üîÑ –©–æ–¥–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ —Å–∫–∏–Ω—É—Ç–æ: –ø—Ä–æ–ø—É—â–µ–Ω–∏–π –¥–µ–Ω—å")
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
            currentProfile.lastLoginDate = now
            saveProfile()
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
            checkAchievements()
        }
    }
    
    func restorePurchases() async -> Bool {
        do {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ StoreKit
            let products = try await Product.products(for: ["pro_upgrade"])
            guard let proProduct = products.first else { return false }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ Apple ID
            for await verification in Transaction.currentEntitlements {
                if case .verified(let transaction) = verification {
                    if transaction.productID == proProduct.id {
                        // –ü–æ–∫—É–ø–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ —ñ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞
                        currentProfile.isPro = true
                        saveProfile()
                        return true
                    }
                }
            }
            return false
        } catch {
            Logger.shared.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫: \(error.localizedDescription)")
            return false
        }
    }
} 